/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.53
 * Generated at: 2023-12-16 10:18:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.web.log4j.LoggerFactory;
import com.web.common.Generic;
import com.web.common.CommonFactory;
import com.web.common.Constant;
import com.web.util.Dbmanager;
import java.io.FileOutputStream;
import java.io.File;
import java.io.DataInputStream;
import org.json.JSONObject;
import org.json.JSONArray;

public final class upload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.DataInputStream");
    _jspx_imports_classes.add("com.web.util.Dbmanager");
    _jspx_imports_classes.add("org.json.JSONObject");
    _jspx_imports_classes.add("com.web.common.Constant");
    _jspx_imports_classes.add("com.web.log4j.LoggerFactory");
    _jspx_imports_classes.add("com.web.common.CommonFactory");
    _jspx_imports_classes.add("java.io.FileOutputStream");
    _jspx_imports_classes.add("com.web.common.Generic");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("org.json.JSONArray");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");


DataInputStream in = null ; 
FileOutputStream fout = null ;

try
{
	Generic.LogObject = this ;
	
	String saveFile = "" ;
	String contentType = request.getContentType() ;
	
	if( contentType != null && contentType.indexOf("multipart/form-data") != -1 )
	{
		String uploadPath = CommonFactory.isNull( Dbmanager.getDBPropertiesPath(Constant.PROFILE_IMAGE_PATH) ) ;
		String userPath   = CommonFactory.isNull(request.getSession().getAttribute("user_id")) +Constant.seperator  ;

		if(uploadPath.endsWith(Constant.seperator))
			uploadPath			 += userPath ;
		else
			uploadPath			 += Constant.seperator + userPath ;
		
		in = new DataInputStream(request.getInputStream());
		int formDataLength = request.getContentLength() ;
		byte dataBytes[]   = new byte[formDataLength] ;
		int byteRead = 0 , totalBytesRead = 0 , lastIndex = contentType.lastIndexOf("=") ,pos;
		
 		Generic.logContent("DataInputStream > "+in.toString(), LoggerFactory.DEBUG);
 		Generic.logContent("uploadPath "+ uploadPath, LoggerFactory.DEBUG);

		while( totalBytesRead < formDataLength )
		{
			byteRead = in.read(dataBytes, totalBytesRead ,formDataLength ) ;
			Generic.logContent("byteRead > "+byteRead , LoggerFactory.DEBUG);
			Generic.logContent("totalBytesRead > "+totalBytesRead , LoggerFactory.DEBUG);
			totalBytesRead += byteRead ;	
		}
		
 		Generic.logContent("totalBytesRead > "+totalBytesRead , LoggerFactory.DEBUG);
 		Generic.logContent("formDataLength > "+formDataLength , LoggerFactory.DEBUG);
 		
		String file = new String(dataBytes);
 		Generic.logContent("file > "+new String(dataBytes) , LoggerFactory.DEBUG);
		
		saveFile	= file.substring(file.indexOf("filename=\"") + 10 );
 		Generic.logContent("saveFile1 > "+saveFile , LoggerFactory.DEBUG);
		
		saveFile	= saveFile.substring(0 , saveFile.indexOf("\n") );
 		Generic.logContent("saveFile2 > "+saveFile , LoggerFactory.DEBUG);
		
		saveFile	= saveFile.substring( saveFile.indexOf("\\") + 1 , saveFile.indexOf("\"") );
 		Generic.logContent("saveFile3 > "+saveFile , LoggerFactory.DEBUG);
		
		String boundary = contentType.substring(lastIndex + 1 , contentType.length()) ;
		
 		Generic.logContent("boundary > "+boundary, LoggerFactory.DEBUG);
		
		pos = file.indexOf("filename=\"") ;
		pos = file.indexOf("\n",pos) + 1 ;
		pos = file.indexOf("\n",pos) + 1 ;
		pos = file.indexOf("\n",pos) + 1 ;
		
 		Generic.logContent("Position of String >"+pos, LoggerFactory.DEBUG);
		
		int boundaryLocation = file.indexOf(boundary,pos) - 4 ;
		int startPos 	=   ( file.substring(0, pos)).getBytes().length ; 
		int endPos 		=   ( file.substring(0, boundaryLocation)).getBytes().length ;
		
 		Generic.logContent(" endPos ["+endPos+"] startPos["+startPos+"] boundaryLocation["+boundaryLocation+"]", LoggerFactory.DEBUG);
		
		if( Generic.createFolders(uploadPath) )
		{
			File f = new File( uploadPath + saveFile );
			
 			Generic.logContent("File > "+f, LoggerFactory.DEBUG);
			
			fout = new FileOutputStream(f);
 			Generic.logContent("FileOutputStream > "+fout, LoggerFactory.DEBUG);
			
			fout.write(dataBytes, startPos, endPos - startPos );
			
			out.println(" Success .... ") ;
		}
		else
		{
			out.println(" Error in File Path Creation ... ");
		}
		
	}
}
catch(Throwable e)
{
	out.print(e.toString()) ;
	e.printStackTrace();
}
finally
{
	if( fout != null)
	{
		fout.flush();
		fout.close();
	}
	
	if ( in != null)
	{
		in.close();
	}
	
}


    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
