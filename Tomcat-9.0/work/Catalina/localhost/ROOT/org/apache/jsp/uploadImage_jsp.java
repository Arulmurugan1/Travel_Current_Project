/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.53
 * Generated at: 2023-12-16 10:30:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.io.InputStream;
import com.web.log4j.LoggerFactory;
import com.web.common.Generic;
import com.web.common.CommonFactory;
import com.web.common.Constant;
import java.io.FileOutputStream;

public final class uploadImage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.OutputStream");
    _jspx_imports_classes.add("com.web.common.Constant");
    _jspx_imports_classes.add("com.web.log4j.LoggerFactory");
    _jspx_imports_classes.add("com.web.common.CommonFactory");
    _jspx_imports_classes.add("java.io.FileOutputStream");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("com.web.common.Generic");
    _jspx_imports_classes.add("java.io.FileNotFoundException");
    _jspx_imports_classes.add("java.io.InputStream");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");


String res = "";

try
{
	Generic.LogObject = this ;
	
	String fileName	 = "" , filePath = "";	
	String seperator  = Constant.seperator ;
	String uploadPath = getServletContext().getRealPath("/Images");
	
	Generic.logContent( " Inside UploadImage.jsp ", LoggerFactory.DEBUG);

	if(uploadPath.endsWith(seperator))
	{
		uploadPath			 += CommonFactory.isNull(session.getAttribute("user_id")) +seperator  ;
	}
	else
	{
		uploadPath			 += seperator + CommonFactory.isNull(session.getAttribute("user_id")) +seperator  ;
	}
	
	Generic.logContent( " Image Upload Path [" +uploadPath+"] ", LoggerFactory.DEBUG);

	if( Generic.createFolders(uploadPath) );
	{
		
		Part filePart = request.getPart("imageFile");
		
		if(filePart == null)
		{
			res = " Cannot read Image / File Part is null ";
			return;
		}
		
	    String header = filePart.getHeader("content-disposition");
	    
	    Generic.logContent( "Upload header ["+header+"]", LoggerFactory.DEBUG);
	    
	    for (String elem : header.split(";")) 
	    {
	    	Generic.logContent( "Upload header elem ["+elem+"]", LoggerFactory.DEBUG, null); 
	    	
	        if (elem.trim().startsWith("filename")) 
	        {
	        	String name = elem.substring(elem.indexOf('=') + 1).trim().replace("\"", "") ;
	        	
	        	Generic.logContent( "Upload header element ["+elem+"] FileName ["+name+"]", LoggerFactory.DEBUG, null); 
	        	
	        	fileName = name ;
	        }
	    }
	    
		filePath = uploadPath + seperator + fileName;
		
		Generic.logContent( " filePart ["+filePart+"] fileName [" + fileName+"] filePath [" + filePath+"] ", LoggerFactory.DEBUG);

		if( fileName == "" )
		{
			res = " Cannot read Image File Name .... ";
			return;
		}
		
		InputStream fileContent 		= filePart.getInputStream();
		
		OutputStream fileOutputStream 	= new FileOutputStream(filePath);
		
		try 
		{
			
			Generic.logContent( " fileContent ["+fileContent+"]\t fileOutputStream [" + fileOutputStream+"]", LoggerFactory.DEBUG);
			
			int read;
			
			final byte[] bytes = new byte[request.getContentLength()];
			
			fileOutputStream.write(bytes, 0, request.getContentLength());
			
			res = "Uploaded Successfully" ;
			
			Generic.logContent( "Uploaded Successfully", LoggerFactory.DEBUG, null);
			
		}
		finally
		{
			fileContent.close();
			fileOutputStream.flush();
			fileOutputStream.close();
		}
	}
}
catch(FileNotFoundException e)
{
	out.println(" FileNotFoundException in UploadImage");
	Generic.logContent(" FileNotFoundException in UploadImage", LoggerFactory.ERROR,e);
}
catch(IOException e )
{
	out.println(" IOException in UploadImage");
	Generic.logContent(" IOException in UploadImage", LoggerFactory.ERROR,e);
}
catch(ServletException e )
{
	out.println(" ServletException in UploadImage");
	Generic.logContent(" ServletException in UploadImage", LoggerFactory.ERROR,e);
}
catch(Exception e )
{
	out.println(" Exception in UploadImage");
	Generic.logContent(" Exception in UploadImage", LoggerFactory.ERROR,e);
}
finally
{
	out.println(res);
}


    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
